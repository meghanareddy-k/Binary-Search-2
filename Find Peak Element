// Time Complexity : O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no
// Your code here along with comments explaining your approach in three sentences only
// we can use BS as we can discard one side of the list at any given time. So at mid see if its the peak if it is return it else move to that side which has value greater than mid.

class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0;
        int n = nums.length;
        int high = nums.length;
        int mid;
        while(low<=high){
            mid = low+ (high-low)/2;
            if((mid==0||nums[mid]>nums[mid-1])&&
                (mid==n-1 ||nums[mid]>nums[mid+1])){
                    return mid;
                }
            else if(mid!=0 && nums[mid]<nums[mid-1]){
                 high = mid-1;
            }
            else{
                low =mid+1;
            }
        }
        return -1;
    }
}