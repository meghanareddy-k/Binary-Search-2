// Time Complexity : O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach in three sentences only
//we will see the mid is less than mid-1 that means it is the pivot else we will search in the non sorted side and discard the other half

class Solution {
    public int findMin(int[] nums) {
        int low =0;
        int high = nums.length-1;
        int mid;
        while(low<=high){
            //check for complete range
            if(nums[low]<=nums[high]) return nums[low];
            mid = low+(high-low)/2;
            if(mid!= 0 && nums[mid]< nums[mid-1]){
                return nums[mid];
            }
            else if(nums[low]<= nums[mid]){
                 low =mid+1;
            }
            else{
                high =mid-1;
            }
        }
        return -1;

    }
}
